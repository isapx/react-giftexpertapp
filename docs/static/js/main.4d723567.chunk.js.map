{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagenes","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB9C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAK,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACTC,EADS,0FAC+EC,UAAUH,GADzF,sBAESI,MAAMF,GAFf,cAETG,EAFS,gBAGMA,EAAUC,OAHhB,uBAGRC,EAHQ,EAGRA,KAEDC,EAAOD,EAAKE,KAAQ,SAAAC,GACtB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAT1B,kBAaRM,GAbQ,4CAAH,sDCAPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA0BxC,OAnBAC,qBAAW,WAEPxB,EAASC,GACRwB,MAAK,SAAAC,GAIEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAQtB,CAACpB,IAEGqB,EDpB0BK,CAAa1B,GAAlC2B,EAHuB,EAG5BpB,KAAea,EAHa,EAGbA,QAiBtB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GACjDoB,GAAW,uBAAGJ,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAEPW,EAASlB,KAAK,SAAAmB,GAAK,OACf,kBAAC,EAAD,eACIC,IAAMD,EAAMjB,IACRiB,UEIjBE,EAnCM,WAAO,IAAD,EAGa5C,mBAAS,CAAC,cAHvB,mBAGhB6C,EAHgB,KAGJ9C,EAHI,KAWvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAMQ8C,EAAWtB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI6B,IAAO7B,EACPA,SAAWA,UCvBvCgC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.4d723567.chunk.js","sourcesContent":["//rafc \r\nimport React, { useState }from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setcategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        \r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //para evitarel refresco del navegador debido al form\r\n        //console.log('Submit hecho')\r\n\r\n        if (inputValue.trim().length > 2 ){ //para cuidar que no este vacio\r\n\r\n            setcategories(categ => [inputValue,...categ]);\r\n            setInputValue(''); //reiniciamos el input a vacio\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n        const url =`https://api.giphy.com/v1/gifs/search?api_key=tvEPM9DOBX7ullpmR4qJXb4iQ7LcH7ot&q=${encodeURI(category)}&limit=10`\r\n        const respuesta = await fetch(url);\r\n        const {data} = await respuesta.json();\r\n\r\n        const gifs = data.map   ( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs; //no regresa los gif, regresa una promesa que resuelve la cocleccion de imagenes\r\n   \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n\r\n   // console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n//tvEPM9DOBX7ullpmR4qJXb4iQ7LcH7ot\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n  \r\n    const {data:imagenes, loading} = useFetchGifs(category);\r\n\r\n\r\n    \r\n\r\n    // //este codigo solo se ejecuta cuando el componente es renderizado por primera vez\r\n    // useEffect( ()=> {\r\n    //     getGifs(category)\r\n    //         //.then(imgs => setImages(imgs)); es lo mismo que este:\r\n    //         .then( setImages );\r\n    // }, [ category ])\r\n\r\n\r\n\r\n\r\n    //getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className=\"card-grid\">            \r\n                {\r\n                    imagenes.map( image => (                        \r\n                        <GifGridItem\r\n                            key={ image.id} \r\n                            {...image}\r\n                        />                                                    \r\n                    ))                \r\n                }            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState,useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs( category )\r\n        .then(imgs => {\r\n\r\n       //     setTimeout( () => { //agregamos un retraso de 3 seg para visualizar el Loading\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n     //       },3000)\r\n\r\n           \r\n        })\r\n\r\n    }, [category]) //cuando cambia la categoria se dispara este useEffect\r\n\r\n    return state; // {data:[], loading: true}\r\n\r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setcategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     //agregar una nueva categoria\r\n    //     setcategories([...categories,'HunterXHunter']);\r\n    //     setcategories(categ => [...categ, 'HunterXHunter']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategories={ setcategories }/>\r\n            <hr />\r\n           \r\n            <ol>\r\n                {\r\n                    //como en esta funcion solo regresamos un valor en la funcion de flecha, la podemos cambiar por lo que esta mas abajo:\r\n                    // categories.map ( category => {\r\n                    //     return <li key={category}>{category}</li>\r\n                    // })\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\n\n\n\nReactDOM.render(  \n    <GifExpertApp />,  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}